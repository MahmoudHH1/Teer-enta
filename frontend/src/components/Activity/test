return (
    <div className="max-w-3xl mx-auto p-4 sm:p-6 lg:p-8 flex flex-col gap-6">
        <BackButton />
        <Title level={2} className="text-center text-indigo-600">
            {itinerary?.name} Booking
        </Title>

        {/* Description and Language */}
        <div className="bg-white shadow p-6 rounded-lg">
            <Text className="text-lg font-semibold block mb-2">Description</Text>
            <Text className="block text-gray-600">{itinerary?.description}</Text>
            <Text className="text-lg font-semibold block mt-4">Language</Text>
            <Text className="block text-gray-600">{itinerary?.language}</Text>
        </div>

        {/* Promo Code */}
        <div className="bg-white shadow p-6 rounded-lg">
            <Text className="text-lg font-semibold block mb-3">Promo Code</Text>
            <div className="flex gap-2">
                <Input
                    prefix={<TagOutlined />}
                    value={promoCode}
                    onChange={(e) => setPromoCode(e.target.value)}
                    placeholder="Enter promo code"
                    className="flex-1"
                />
                <Button
                    onClick={handleApplyPromo}
                    loading={applyingPromo}
                    type="primary"
                    className="bg-indigo-600"
                >
                    Apply
                </Button>
            </div>
        </div>

        {/* Price Details */}
        <div className="bg-white shadow p-6 rounded-lg">
            <Text className="text-lg font-semibold block mb-3">Price Details</Text>
            <div className="space-y-2">
                <Text className="block text-gray-600">
                    Original Price: {currency?.code} {(currency?.rate * itinerary?.price).toFixed(2)}
                </Text>
                {promoDiscount > 0 && (
                    <>
                        <Text className="block text-green-600">
                            Promo Discount: {promoDiscount}%
                        </Text>
                        <Text className="block text-lg font-semibold text-indigo-600">
                            Final Price: {currency?.code} {calculateFinalPrice(currency?.rate * itinerary?.price)}
                        </Text>
                    </>
                )}
            </div>
        </div>

        {/* Date Picker and Payment Method */}
        <div className="bg-white shadow p-6 rounded-lg">
            <Form layout="vertical">
                <Form.Item label="Select Date" required>
                    <Select
                        className="w-full"
                        placeholder="Select a date"
                        onChange={handleDateChange}
                        value={selectedDate}
                    >
                        {itinerary?.availableDates?.map((date) => (
                            <Select.Option key={date.Date} value={date.Date}>
                                {dayjs(date.Date).format("MMMM D, YYYY")} - {date.Times}
                            </Select.Option>
                        ))}
                    </Select>
                </Form.Item>

                <Form.Item label="Payment Method" required>
                    <Radio.Group onChange={handlePaymentMethodChange} value={paymentMethod}>
                        <Radio value="wallet">Wallet</Radio>
                        <Radio value="Card">Credit Card</Radio>
                    </Radio.Group>
                </Form.Item>

                {paymentMethod === "Card" && (
                    <Elements stripe={loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY)}>
                        <CheckoutForm amount={calculateFinalPrice(currency?.rate * itinerary?.price)} />
                    </Elements>
                )}

                <Form.Item className="mt-6">
                    <Button
                        type="primary"
                        className="w-full h-12 text-lg bg-indigo-600 hover:bg-indigo-700"
                        onClick={handleSubmit}
                        loading={loading}
                        disabled={!selectedDate}
                    >
                        Confirm Booking
                    </Button>
                </Form.Item>
            </Form>
        </div>
    </div>
);